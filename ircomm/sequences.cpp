/* This file is part of the DMComm project by BladeSabre. License: MIT. */

#include <Arduino.h>
#include "ircomm.h"

const uint16_t icWait[] PROGMEM = {'i','C','w',END, false,false,20000, END};

const uint16_t modWait[] PROGMEM = {'m','w',END, true,false,20000, END};

const uint16_t datalinkGive10pt1st[] PROGMEM = {'D','L','1','p','1',END, true,true,20000,
    9792,2464,480,1360,480,1360,488,744,520,712,520,1328,496,736,488,744,488,784,488,1352,488,744,512,712,496,736,
    488,736,520,720,504,728,504,752,520,712,488,736,512,720,520,712,488,744,480,744,512,712,496,760,520,704,512,720,
    520,720,480,744,488,744,512,712,496,736,496,776,480,744,488,744,496,736,520,704,496,1352,488,744,488,744,488,768,
    496,1360,488,744,488,744,496,736,480,1360,488,1360,512,720,480,1384,512,712,512,720,480,752,488,744,504,728,488,
    744,496,736,496,768,520,1328,480,744,488,1360,488,744,480,1360,488,744,496,1352,512,1352,1264,WAIT,END};

const uint16_t datalinkTakePt1st[] PROGMEM = {'D','L','t','p','1',END, true,true,20000,
    9808,2456,512,1336,488,1352,512,720,496,736,520,1328,480,752,480,744,480,784,488,1360,480,744,496,736,488,744,
    496,736,520,720,480,744,520,736,496,736,520,720,512,720,512,720,488,1360,512,720,512,720,488,768,496,736,496,744,
    512,720,480,744,488,744,520,704,496,744,512,744,488,744,496,736,520,712,520,712,488,744,488,744,496,736,496,768,
    520,1328,512,720,480,744,520,704,496,1352,512,1336,512,704,496,1384,488,744,512,720,512,712,488,752,480,744,488,
    744,512,720,496,768,512,1328,504,728,480,1368,496,736,480,1360,488,736,496,1360,488,1368,1240,WAIT,END};

const uint16_t datalinkGive10pt2nd[] PROGMEM = {'D','L','1','p','2',END, true,false,20000,
    9784,2436,508,1304,504,1312,508,696,480,724,500,1308,512,688,480,724,500,724,508,1312,500,692,508,688,
    508,696,472,728,500,692,504,692,500,728,500,696,508,688,508,688,480,724,500,700,504,692,500,696,480,756,500,696,
    500,696,508,696,500,700,500,692,500,696,508,696,472,756,508,688,508,696,480,720,504,696,508,1304,508,692,500,696,
    508,724,508,1304,508,692,504,692,508,692,480,1332,500,1304,508,692,500,1340,508,1308,500,696,508,696,508,696,500,
    1308,500,1312,508,696,500,1336,508,696,500,1304,508,1312,500,696,500,692,508,692,504,692,500,1332,1244,WAIT,END};

const uint16_t datalinkTakePt2nd[] PROGMEM = {'D','L','t','p','2',END, true,false,20000,
    9780,2432,508,1304,508,1304,504,692,504,692,508,1304,508,696,504,692,504,720,504,1304,508,688,516,688,508,692,504,
    692,508,696,508,688,508,724,508,696,500,692,504,696,508,696,508,1304,508,688,504,692,508,720,500,696,508,696,508,
    688,504,692,504,692,508,696,508,688,508,724,500,696,500,692,504,688,512,688,508,1304,508,696,504,684,508,720,508,
    1304,508,696,500,692,508,692,508,1304,504,1304,516,688,508,1332,512,1304,500,696,508,688,504,692,504,1304,508,1308,
    500,696,508,1340,504,692,508,1304,508,1304,508,688,516,1304,504,696,508,688,508,1328,1248,WAIT,END};

const uint16_t icWhaLila2[] PROGMEM = {'i','C','b',END, false,true,2000,
    20,76,20,76,20,92,20,76,20,76,20,92,20,428,20,92,20,76,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,
    20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,92,20,428,20,92,
    20,76,20,76,20,92,20,76,20,76,20,444,20,76,20,92,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,
    20,76,20,444,20,92,20,76,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,76,20,604,20,1244,20,284,
    20,76,20,188,20,92,20,76,20,428,20,76,20,92,20,76,20,76,20,380,20,444,20,76,20,76,20,92,20,76,20,396,20,444,20,396,
    20,860,20,188,20,588,20,220,20,76,20,92,20,76,20,76,20,92,20,556,20,92,20,76,20,76,20,380,20,364,20,76,20,380,20,92,
    20,76,20,348,20,172,20,92,20,76,20,76,20,92,20,WAIT,
    20,76,20,92,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,76,20,444,20,92,20,76,20,76,20,76,
    20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,76,20,444,20,92,20,76,20,76,20,92,20,76,20,76,20,444,20,76,
    20,92,20,76,20,76,20,76,20,92,20,444,20,76,20,76,20,92,20,76,20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,76,
    20,92,20,444,20,76,20,76,20,76,20,92,20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,92,20,76,20,604,20,1244,20,300,
    20,76,20,188,20,76,20,76,20,428,20,92,20,76,20,76,20,92,20,380,20,444,20,76,20,188,20,76,20,396,20,444,20,396,20,92,
    20,76,20,620,20,92,20,76,20,188,20,76,20,76,20,188,20,252,20,92,20,284,20,284,20,76,20,268,20,76,20,188,20,764,20,156,
    20,92,20,76,20,76,20,76,20,WAIT,
    20,76,20,92,20,76,20,76,20,76,20,76,20,460,20,76,20,76,20,76,20,76,20,92,20,76,20,444,20,76,20,92,20,76,20,76,
    20,76,20,92,20,444,20,76,20,76,20,76,20,92,20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,76,20,92,20,444,20,76,
    20,76,20,76,20,92,20,76,20,76,20,460,20,60,20,92,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,
    20,92,20,428,20,92,20,76,20,76,20,92,20,76,20,76,20,444,20,76,20,92,20,76,20,76,20,76,20,92,20,604,20,1244,20,300,
    20,76,20,172,20,92,20,76,20,428,20,76,20,76,20,92,20,76,20,380,20,428,20,92,20,76,20,76,20,92,20,380,20,412,20,380,
    20,92,20,76,20,76,20,76,20,460,20,380,20,92,20,76,20,76,20,92,20,252,20,284,20,76,20,76,20,92,20,76,20,76,20,252,
    20,92,20,76,20,76,20,76,20,76,20,92,20,188,20,236,20,188,20,76,20,76,20,76,20,92,20,WAIT,
    20,76,20,76,20,76,20,92,20,76,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,76,20,444,20,92,20,76,20,76,20,76,
    20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,92,20,428,20,92,20,76,20,76,20,92,20,76,20,76,20,444,20,76,
    20,92,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,76,
    20,92,20,444,20,76,20,76,20,92,20,76,20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,92,20,76,20,588,20,1260,20,300,
    20,76,20,188,20,76,20,92,20,428,20,76,20,76,20,92,20,76,20,380,20,444,20,92,20,76,20,76,20,76,20,380,20,428,20,396,
    20,76,20,76,20,92,20,76,20,444,20,92,20,76,20,76,20,76,20,92,20,76,20,76,20,92,20,268,20,76,20,76,20,508,20,348,
    20,76,20,76,20,188,20,284,20,92,20,236,20,188,20,76,20,76,20,92,20,76,20,WAIT,
    20,76,20,76,20,76,20,92,20,76,20,76,20,444,20,76,20,92,20,76,20,76,20,76,20,92,20,444,20,76,20,76,20,92,20,76,
    20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,76,20,92,20,444,20,76,20,76,20,76,20,92,20,76,20,76,20,444,20,92,
    20,76,20,76,20,76,20,92,20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,92,20,444,20,76,20,76,20,76,20,92,20,76,
    20,76,20,444,20,76,20,76,20,92,20,76,20,76,20,92,20,444,20,76,20,76,20,76,20,92,20,76,20,76,20,604,20,1260,20,268,
    20,76,20,188,20,76,20,92,20,428,20,76,20,76,20,76,20,92,20,396,20,428,20,76,20,92,20,76,20,76,20,380,20,428,20,380,
    20,76,20,92,20,76,20,76,20,444,20,92,20,76,20,76,20,76,20,76,20,300,20,252,20,92,20,172,20,396,20,348,20,396,20,188,
    20,188,20,236,20,188,20,76,20,76,20,76,20,92,WAIT,END};

const uint16_t xrosTrade1st[] PROGMEM = {'X','T','1',END, false,true,2000,
    27,6,30,6,12,6,12,6,12,6,12,6,50,WAIT,END};

const uint16_t * const sequences[] PROGMEM = {
    icWait,
    modWait,
    datalinkGive10pt1st,
    datalinkTakePt1st,
    datalinkGive10pt2nd,
    datalinkTakePt2nd,
    icWhaLila2,
    xrosTrade1st,
};

constexpr int8_t numSequences = sizeof(sequences) / sizeof(sequences[0]);

void SequenceHandler::list(Stream& output) {
    uint16_t * seqStrPGM;
    int8_t i;
    for (i = 0; i < numSequences; i ++) {
        output.write('a' + i);
        output.write(' ');
        seqStrPGM = pgm_read_ptr_near(sequences + i);
        while (pgm_read_word_near(seqStrPGM) != END) {
            output.write(pgm_read_word_near(seqStrPGM));
            seqStrPGM ++;
        }
        output.println();
    }
}

int8_t SequenceHandler::load(uint8_t id) {
    uint16_t * cursorPGM;
    int8_t i = id - 'a';
    if (i < 0 || i >= numSequences) {
        return -1;
    }
    cursorPGM = pgm_read_ptr_near(sequences + i);
    while (pgm_read_word_near(cursorPGM) != END) {
        //skip description
        cursorPGM ++;
    }
    cursorPGM ++;
    isModulated = pgm_read_word_near(cursorPGM ++);
    goFirst = pgm_read_word_near(cursorPGM ++);
    replyDelay = pgm_read_word_near(cursorPGM ++);
    durationsPGM = cursorPGM;
    return 0;
}

uint16_t SequenceHandler::get(uint16_t i) {
    return pgm_read_word_near(durationsPGM + i);
}

SequenceHandler sequenceHandler;
